buildscript {
   repositories {
      jcenter()
      maven{
        url "http://repository.codehaus.org"
      }
   }
   dependencies {
      classpath "org.kohsuke:github-api:1.59"
      classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
   }
}

plugins {
    id "de.undercouch.download" version "1.2"
}


// FILL OUT THIS FIELDS TO GIVE ACCESS TO REPO

String defaultToken
String defaultOrganization
String defaultRepository


task listReleases(type:GithubListReleasesTask) {
   authToken = System.env.GITHUB_TOKEN?:defaultToken
   organization = System.env.GITHUB_ORGANIZATION?:defaultOrganization
   repository = System.env.GITHUB_REPOSITORY?:defaultRepository
}



task downloadRelease << {
  String authToken = System.env.GITHUB_TOKEN?:defaultToken
  String organization = System.env.GITHUB_ORGANIZATION?:defaultOrganization
  String repository = System.env.GITHUB_REPOSITORY?:defaultRepository
  Long id = (download?:0).toLong()
  GitHub github = GitHub.connectUsingOAuth(authToken)
  GHOrganization eevol = github.getOrganization(organization)
  GHRepository repo = eevol.getRepository(repository)
  List releases = repo.getReleases()
  GHRelease release = releases.find{ it.id == id}
  if(!release){
    throw new InvalidUserDataException("No release found with ID")
  }
  println "Download Release Assets: $release"
  release.assets.each{ asset ->
    println "Asset: ${asset.getUrl()}"
    def http = new HTTPBuilder( asset.getUrl() )
    AbstractHttpClient ahc = http.client
    BasicHttpParams params = new BasicHttpParams();
    params.setParameter("http.protocol.handle-redirects",false)
    ahc.setParams(params)
    http.request( GET ) { req ->
      headers.'Authorization' = " token $authToken"
      headers.'Accept' = "application/octet-stream"
      headers.'User-Agent' = 'Mozilla/5.0'

      response.success = { resp, body ->
        // Parse the response
        println "saving to ${asset.getName()}"
        download {
          src resp.headers?.location
          dest asset.getName()
        }
      }
      response.failure = {resp, body ->
        println resp
        println body
        throw new InvalidUserDataException("Could not download asset")
      }
    }
  }
}

import org.kohsuke.github.GitHub
import org.kohsuke.github.GHRepository
import org.kohsuke.github.GHOrganization
import org.kohsuke.github.GHReleaseBuilder
import org.kohsuke.github.GHRelease

import groovy.json.JsonSlurper
import groovyx.net.http.HTTPBuilder
import static groovyx.net.http.Method.*
import static groovyx.net.http.ContentType.*
import org.apache.http.impl.client.AbstractHttpClient
import org.apache.http.params.BasicHttpParams

class GithubListReleasesTask extends DefaultTask {


   @Input
   public String authToken

   @Input
   public String organization

   @Input
   public String repository

   protected CharSequence input


   @TaskAction
   def list() {
      Date date = new Date()
      GitHub github = GitHub.connectUsingOAuth(authToken)
      GHOrganization eevol = github.getOrganization(organization)
      GHRepository repo = eevol.getRepository(repository)
      List releases = repo.getReleases()
      releases.sort{ it.id }.each(){
         println "------Release: ${it.getId()}, ${it.getCreatedAt()}, ${it.getTagName()}"
         it.assets.each{ asset ->
            println " - Asset: ${asset.getName()} (${asset.getBrowserDownloadUrl()})"
         }
      }
   }
}

/*********************************
Wrapper
*********************************/

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}
